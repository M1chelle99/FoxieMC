
      TODO: Outsource, figure out where this is used
    public boolean isPathClearTo(LivingEntity prey) {
        double d0 = prey.getZ() - this.getZ();
        double d1 = prey.getX() - this.getX();
        double d2 = d0 / d1;

        for (int j = 0; j < 6; ++j) {
            double d3 = d2 == 0.0D ? 0.0D : d0 * (double) ((float) j / 6.0F);
            double d4 = d2 == 0.0D ? d1 * (double) ((float) j / 6.0F) : d3 / d2;

            for (int k = 1; k < 4; ++k) {
                var block = new BlockPos(this.getX() + d4, this.getY() + (double) k, this.getZ() + d3);
                if (!this.level.getBlockState(block).getMaterial().isReplaceable())
                    return false;
            }
        }

        return true;
    }

    public boolean canPickupItem(ItemEntity item) {
        return !item.hasPickUpDelay() && item.isAlive();
    }

    public boolean isScaryHuman(LivingEntity human) {
        var isHumanAGodOrSpectator = EntitySelector.NO_CREATIVE_OR_SPECTATOR.test(human);
        var isHumanAGhost = EntitySelector.NO_SPECTATORS.test(human);
        var isHumanAGod = !isHumanAGhost && isHumanAGodOrSpectator;
        var isHumanTrusted = this.trusts(human.getUUID());
        if (isHumanAGod) return false;  God's are ok. 
        if (isHumanAGhost) return true;  Ghosts... brr.. scary
        if (isHumanTrusted) return false;  I like that guy :)
        return !human.isDiscrete();  this stranger comes really close...
    }

    public boolean isThreatening(LivingEntity entity) {
        return entity instanceof PolarBear
                || entity instanceof Wolf
                || entity instanceof Goat
                || entity instanceof Cow
                || entity instanceof IronGolem;
    }

    public boolean isAlerting(LivingEntity entity) {
        if (this.mouthControl.isPrey(entity)) return true;
        if (entity instanceof Monster) return true;
        if (this.isThreatening(entity)) return true;
        return this.isScaryHuman(entity);
    }

